<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>
	</string>
	<key>fileTypes</key>
	<array>
		<string>c</string>
		<string>h</string>
	</array>
	<key>firstLineMatch</key>
	<string>-[*]-( Mode:)? C -[*]-</string>
	<key>foldingStartMarker</key>
	<string>(?x)
		 /\*\*(?!\*)
		|^(?![^{]*?//|[^{]*?/\*(?!.*?\*/.*?\{)).*?\{\s*($|//|/\*(?!.*?\*/.*\S))
	</string>
	<key>foldingStopMarker</key>
	<string>(?&lt;!\*)\*\*/|^\s*\}</string>
	<key>keyEquivalent</key>
	<string>^~C</string>
	<key>name</key>
	<string>C Improved</string>

	<key>patterns</key>
	<array>
		<dict>
			<key>match</key> <string>(?ix)  # hexadecimal float
				(?&lt;!\.) \b

				(0x)

				# significand
				(?: (\.) (?=p)  # invalid
				  |        [0-9a-f]*+ ([0-9a-z]*?) [0-9a-f]*+
				    (?: \. [0-9a-f]*+ ([0-9a-z.]*?) [0-9a-f]*+ )? )

				# exponent (required)
				(?: (p) (?:        [+\-]  [0-9]++ ([0-9a-z]*?)
				          | (?=[0-9a-z.]) [0-9]*+ ([0-9a-z.]*?) )
				  | (p) )

				# remaining valid chars and type
				[0-9]*+ ([fl]?)

				\b (?!\.)
			</string>
			<key>name</key> <string>constant.numeric.float.hexadecimal.c</string>
			<key>captures</key>
			<dict>
				<key>1</key> <dict> <key>name</key> <string>storage.type.number.prefix.hexadecimal.c</string> </dict>
				<key>2</key> <dict> <key>name</key> <string>invalid.illegal.number.missing-fragment.significand.c</string> </dict>
				<key>3</key> <dict> <key>name</key> <string>invalid.illegal.numeric-literal-character.float.whole-number.c</string> </dict>
				<key>4</key> <dict> <key>name</key> <string>invalid.illegal.numeric-literal-character.float.fraction.c</string> </dict>
				<key>5</key> <dict> <key>name</key> <string>keyword.other.exponent.hexadecimal.c</string> </dict>
				<key>6</key> <dict> <key>name</key> <string>invalid.illegal.numeric-literal-character.float.exponent.c</string> </dict>
				<key>7</key> <dict> <key>name</key> <string>invalid.illegal.numeric-literal-character.float.exponent.c</string> </dict>
				<key>8</key> <dict> <key>name</key> <string>invalid.illegal.number.missing-fragment.exponent.c</string> </dict>
				<key>9</key> <dict> <key>name</key> <string>storage.type.number.suffix.float.c</string> </dict>
			</dict>
		</dict>
		<dict>
			<key>match</key> <string>(?ix)  # hexadecimal float without required exponent
				(?&lt;!\.) \b

				(0x)

				# significand (at least a period)
				     [0-9a-f]*+ ([0-9a-z&amp;&amp;[^p]]*?) [0-9a-f]*+
				(\.) [0-9a-f]*+ ([0-9a-z.&amp;&amp;[^p]]*?) [0-9a-f]*+

				# type
				(l?)

				(?:(?&lt;=\.)|\b) (?!\.)
			</string>
			<key>name</key> <string>constant.numeric.float.hexadecimal.c</string>
			<key>captures</key>
			<dict>
				<key>1</key> <dict> <key>name</key> <string>storage.type.number.prefix.hexadecimal.c</string> </dict>
				<key>2</key> <dict> <key>name</key> <string>invalid.illegal.numeric-literal-character.float.whole-number.c</string> </dict>
				<key>3</key> <dict> <key>name</key> <string>invalid.illegal.number.hexadecimal-float-requires-exponent.c</string> </dict>
				<key>4</key> <dict> <key>name</key> <string>invalid.illegal.numeric-literal-character.float.fraction.c</string> </dict>
				<key>5</key> <dict> <key>name</key> <string>storage.type.number.suffix.float.c</string> </dict>
			</dict>
		</dict>
		<dict>
			<key>match</key> <string>(?ix)  # decimal float literal
				(?&lt;!\.) (?:(?=\.)|\b)

				(?!0x)
				# significand
				(?: (?: [0-9]++ ([0-9a-z&amp;&amp;[^e]]*?) [0-9]+* )?
				    \.  [0-9]++ ([0-9a-z.&amp;&amp;[^e]]*?) [0-9]+*

				  |     [0-9]++ ([0-9a-z&amp;&amp;[^e]]*?) [0-9]+* (?: \. | (?=e)) )

				# exponent (optional)
				(?: (e) (?: [+\-]  [0-9]++ ([0-9a-z]*?)
				          |        [0-9]++ ([0-9a-z.]*?) )
				  | ( p     [+\-]? [0-9]++
				    | [ep]                  [0-9a-z.]*?) )?

				# any invalid chars and type
				([0-9a-z]*?) [0-9]*+ ([fl]?)

				(?:(?&lt;=\.)|\b) (?!\.)
			</string>
			<key>name</key> <string>constant.numeric.float.c</string>
			<key>captures</key>
			<dict>
				<key>1</key> <dict> <key>name</key> <string>invalid.illegal.numeric-literal-character.float.whole-number.c</string> </dict>
				<key>2</key> <dict> <key>name</key> <string>invalid.illegal.numeric-literal-character.float.fraction.c</string> </dict>
				<key>3</key> <dict> <key>name</key> <string>invalid.illegal.numeric-literal-character.float.whole-number.c</string> </dict>
				<key>4</key> <dict> <key>name</key> <string>keyword.other.exponent.decimal.c</string> </dict>
				<key>5</key> <dict> <key>name</key> <string>invalid.illegal.numeric-literal-character.float.exponent.c</string> </dict>
				<key>6</key> <dict> <key>name</key> <string>invalid.illegal.numeric-literal-character.float.exponent.c</string> </dict>
				<key>7</key> <dict> <key>name</key> <string>invalid.illegal.numeric-literal-character.float.exponent.c</string> </dict>
				<key>8</key> <dict> <key>name</key> <string>invalid.illegal.numeric-literal-character.float.exponent.c</string> </dict>
				<key>9</key> <dict> <key>name</key> <string>storage.type.number.suffix.float.c</string> </dict>
			</dict>
		</dict>
		<dict>
			<key>match</key> <string>(?ix)
				(?&lt;!\.) \b
				(0x)? 0++
				(u?l{0,2}|lul?|llu)
				\b (?!\.)
			</string>
			<key>name</key> <string>constant.numeric.integer.zero.c</string>
			<key>captures</key>
			<dict>
				<key>1</key> <dict> <key>name</key> <string>storage.type.number.prefix.hexadecimal.c</string> </dict>
				<key>2</key> <dict> <key>name</key> <string>storage.type.number.suffix.c</string> </dict>
			</dict>
		</dict>
		<dict>
			<key>match</key> <string>(?ix)
				(?&lt;!\.) \b

				(?: (0x) | (0b) )
				(u?l{0,2}|lul?|llu)

				\b (?!\.)
			</string>
			<key>name</key> <string>invalid.illegal.invalid-number-literal.c</string>
			<key>captures</key>
			<dict>
				<key>1</key> <dict> <key>name</key> <string>storage.type.number.prefix.hexadecimal.c</string> </dict>
				<key>2</key> <dict> <key>name</key> <string>storage.type.number.prefix.binary.c</string> </dict>
				<key>3</key> <dict> <key>name</key> <string>storage.type.number.suffix.c</string> </dict>
			</dict>
		</dict>
		<dict>
			<key>match</key> <string>(?ix)
				(?&lt;!\.) \b

				(0x) [0-9a-f]++

				# any invalid chars
				([0-9a-z]*?)

				# the remainder (after invalid chars, if any) and a type
				[0-9a-f]* (u?l{0,2}|lul?|llu)

				\b (?!\.)
			</string>
			<key>name</key> <string>constant.numeric.integer.hexadecimal.c</string>
			<key>captures</key>
			<dict>
				<key>1</key> <dict> <key>name</key> <string>storage.type.number.prefix.hexadecimal.c</string> </dict>
				<key>2</key> <dict> <key>name</key> <string>invalid.illegal.numeric-literal-character.integer.c</string> </dict>
				<key>3</key> <dict> <key>name</key> <string>storage.type.number.suffix.c</string> </dict>
			</dict>
		</dict>
		<dict>
			<key>match</key> <string>(?ix)
				(?&lt;!\.) \b

				(0b) [01]++

				# any invalid chars
				([0-9a-z]*?)

				# the remainder (after invalid chars, if any) and a type
				[01]* (u?l{0,2}|lul?|llu)

				\b (?!\.)
			</string>
			<key>name</key> <string>constant.numeric.integer.binary.c</string>
			<key>captures</key>
			<dict>
				<key>1</key> <dict> <key>name</key> <string>storage.type.number.prefix.binary.c</string> </dict>
				<key>2</key> <dict> <key>name</key> <string>invalid.illegal.numeric-literal-character.integer.c</string> </dict>
				<key>3</key> <dict> <key>name</key> <string>storage.type.number.suffix.c</string> </dict>
			</dict>
		</dict>
		<dict>
			<key>match</key> <string>(?ix)
				(?&lt;!\.) \b

				(0) [0-7]++

				# any invalid chars
				([0-9a-z]*?)

				# the remainder (after invalid chars, if any) and a type
				[0-7]* (u?l{0,2}|lul?|llu)

				\b (?!\.)
			</string>
			<key>name</key> <string>constant.numeric.integer.octal.c</string>
			<key>captures</key>
			<dict>
				<key>1</key> <dict> <key>name</key> <string>storage.type.number.prefix.octal.c</string> </dict>
				<key>2</key> <dict> <key>name</key> <string>invalid.illegal.numeric-literal-character.integer.c</string> </dict>
				<key>3</key> <dict> <key>name</key> <string>storage.type.number.suffix.c</string> </dict>
			</dict>
		</dict>
		<dict>
			<key>match</key> <string>(?ix)
				(?&lt;!\.) \b

				[0-9]++

				# any invalid chars
				([0-9a-z]*?)

				# the remainder (after invalid chars, if any) and a type
				[0-9]* (u?l{0,2}|lul?|llu)

				\b (?!\.)
			</string>
			<key>name</key> <string>constant.numeric.integer.decimal.c</string>
			<key>captures</key>
			<dict>
				<key>1</key> <dict> <key>name</key> <string>invalid.illegal.numeric-literal-character.integer.c</string> </dict>
				<key>2</key> <dict> <key>name</key> <string>storage.type.number.suffix.c</string> </dict>
			</dict>
		</dict>
	</array>

	<key>scopeName</key>
	<string>source.c.numbers</string>
	<key>uuid</key>
	<string>24242A3A-CC4A-414D-B1FA-18D2BABB6751</string>
</dict>
</plist>
